#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-index4.ceda.ac.uk - 2021/05/27 16:33:26
# Search URL: http://esgf-index4.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=CMIP6.HighResMIP.MOHC.HadGEM3-GC31-HH.highres-future.r1i1p1f1.Omon.zos.gn.v20200514|esgf-data3.ceda.ac.uk
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://esgf-index4.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=CMIP6.HighResMIP.MOHC.HadGEM3-GC31-HH.highres-future.r1i1p1f1.Omon.zos.gn.v20200514|esgf-data3.ceda.ac.uk'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201501-201503.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201501-201503.nc' 'SHA256' '76ecbc2a4f1740aa72c87c181e96ab182c87d01e2093de3b65867b8c6c32f5cf'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201504-201506.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201504-201506.nc' 'SHA256' '2ae15a29d670d3f1e9a4068b0a08691c1c78db52e366990e84f285570ab9b840'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201507-201509.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201507-201509.nc' 'SHA256' '8c8098bef35dddad4c77f149cb51f19aea485f7d8c2cb74406d38f7e99ce8346'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201510-201512.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201510-201512.nc' 'SHA256' 'eb667fcbad715c9a495432928b1222a2f4191c5fe43b06e688553a2cf11c59c9'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201601-201603.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201601-201603.nc' 'SHA256' '268580fb3bb054074d1f7232c76e72386eea3ad1055f0fb80384b43719825a88'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201604-201606.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201604-201606.nc' 'SHA256' '9f6e0670096bd171f71fb3d19fc2ffa3b9c48fb1f97a7ec982b7f1bd995552e3'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201607-201609.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201607-201609.nc' 'SHA256' '1233976386080846b428094fb932a33dfa6c1af06012a8204ee8c5c3322211da'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201610-201612.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201610-201612.nc' 'SHA256' 'db8cb8089f178d25bc3b7cf59be1e12c27623443f91891e8776722f98d795a70'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201701-201703.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201701-201703.nc' 'SHA256' 'dfe0a63460ef5b9bcc85913f8010234af9c9039c0ceccb5ca2d26bfce1331df7'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201704-201706.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201704-201706.nc' 'SHA256' '3254d71f951295bfd6c6d030c0d2487dadd7bf8f40d2bc6c4641e375bc84ed8a'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201707-201709.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201707-201709.nc' 'SHA256' '8b9cf8cfaa26789b5c57e8881d30bd87a3f0e9be51f8eb222d1e4dbc21bf81e0'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201710-201712.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201710-201712.nc' 'SHA256' '3c8e482eac8f78d6446d8294832ff32355d37d70e3e0ff90c8f2316cb85f667d'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201801-201803.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201801-201803.nc' 'SHA256' '43bea3afc028941aa6da5ebd41529f81f7c918bd62bf597ce5247f6c81245755'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201804-201806.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201804-201806.nc' 'SHA256' '251fa46f1f8dd34abdc8cd84cc52ecb7c243c4f7b9c729870d880fdfe535f656'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201807-201809.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201807-201809.nc' 'SHA256' 'fcae09173e27b0520860cd3feb6a94c08f86775138c1c2a3a48fc3aee7c3c1a1'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201810-201812.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201810-201812.nc' 'SHA256' '309f12aa941bb4661c2f83cb3c757a3ccf00a0d888e386e7774d3a91f65f412e'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201901-201903.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201901-201903.nc' 'SHA256' 'af211a721d33a80e21da325c96347232b8680cefd8cd73cc163ee2665528f1ce'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201904-201906.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201904-201906.nc' 'SHA256' '1500f200f86ad3b3ee331af9084787b741698b16ac48d3539bc364af5321a41b'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201907-201909.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201907-201909.nc' 'SHA256' 'f5c23f5fe8df408264d81e96e975b23cad7219ae00099bb445166957363d8754'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201910-201912.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_201910-201912.nc' 'SHA256' '6c36c728d09d44bfb9992ef914b77d7c4d4a0f61eda4e46f03ee39963c5ee0f4'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202001-202003.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202001-202003.nc' 'SHA256' '2e10446dc5047eb809f20fdc76f1d2f2081d4ee4fa9f1d9d6dcc6f3a43ee53cb'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202004-202006.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202004-202006.nc' 'SHA256' '217f660ed0d8d48b5130e69f24ff2e28dc2505c88ec4758128fd0ccb8f381647'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202007-202009.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202007-202009.nc' 'SHA256' '305274b3131789db720dad38c60d0f78ffa263f1be0d8d3a5067daf2c1b5dc24'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202010-202012.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202010-202012.nc' 'SHA256' '2289b9d535f096e2ec43086778cda1dbc377c56297467dc93405476bfc6eb8b8'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202101-202103.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202101-202103.nc' 'SHA256' '8103b76f1440c60ae8801f8ec48bdd5abef3cc4ecbdcc0ff5998e11607cbf84b'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202104-202106.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202104-202106.nc' 'SHA256' 'e83d3df5d31e0643f7672c80c6392dc2a3b5d639092d2f4ab325ac55aa6a6a03'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202107-202109.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202107-202109.nc' 'SHA256' '0abe446c5b912b8c629e5376fa9ef42fa3e7c9481e252002f780af5347feb71f'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202110-202112.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202110-202112.nc' 'SHA256' '98748a640309ae2433abd28054fe1bc3a5e86bac4fede23bdb1bcb478c9aa7f2'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202201-202203.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202201-202203.nc' 'SHA256' '2161657df4f51344d1515feeee894176a1001d0aa96bcaf155422354294e2659'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202204-202206.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202204-202206.nc' 'SHA256' '39d528ed2bf9fd267c58bad0b10976532e005862781118b34161f84fdcbee9a4'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202207-202209.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202207-202209.nc' 'SHA256' 'a2c64365cc9ee63c93d423aee8e779da97e886ef4a14becb26ea6e7dc390c3a1'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202210-202212.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202210-202212.nc' 'SHA256' 'bb10351df0ca13265e3f737b13220a6d22c9baec9c23e0035c5a69d392012546'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202301-202303.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202301-202303.nc' 'SHA256' '6471a1059bb71d7ee481af60e36e43b1c7ba83ab9f49457113664df701085deb'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202304-202306.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202304-202306.nc' 'SHA256' '7cf38614a781864a0f1424f81111ac0d2d5439c45da01be10b72bfa759e5c104'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202307-202309.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202307-202309.nc' 'SHA256' '390fbf133c90185f9cf39e0ff14a1b9c64ca04d979f21c426ec0a64c3b6d6df5'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202310-202312.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202310-202312.nc' 'SHA256' 'bfe343c823a956b4f14df85b031e21483f5f381c7fa286d49707bbec0a2d5a7f'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202401-202403.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202401-202403.nc' 'SHA256' '90f73c2bc35a355ac90aebaaa1622d3d24e7060e8b6ab5f87579bb03b3c03e94'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202404-202406.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202404-202406.nc' 'SHA256' '2ea7ff4c5a8e77bcd5d6717530049689755f2f1f7ec078cf68647e778ddf258e'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202407-202409.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202407-202409.nc' 'SHA256' '612ae4fb5447c3d59601b90ed3e250e6de4815483de1609cf6e7e199e3d8fec6'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202410-202412.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202410-202412.nc' 'SHA256' 'e4094989704a3ec6b201c8f39dac711c7c529fb4348736ad0e6165a0ac50802c'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202501-202503.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202501-202503.nc' 'SHA256' '237c0317e07dbf42c49bc2616c39b7b8c6ac35793251bf7d3769fb1c435ab6c3'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202504-202506.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202504-202506.nc' 'SHA256' '7eba5633902a05e558e350f0d4e8677d2029040cad2723b5d3dcf481b4787cf2'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202507-202509.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202507-202509.nc' 'SHA256' '43332b2d9b1201c991b06915fc431cdd2a137969ce80d1b947464b4267d278d1'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202510-202512.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202510-202512.nc' 'SHA256' '878194e581f6bd302e3c8d21349cf48da58b7a37164e1de5f435e413f5338fb2'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202601-202603.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202601-202603.nc' 'SHA256' 'fa1fdf75b9fe5cb87a4e1f20e6db38608be44b33976e2b64b93c206b427a0b43'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202604-202606.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202604-202606.nc' 'SHA256' '314db2544acd7f8fed9a9c8c4fe78d8ffdbc061701a63d768342438bf22c372c'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202607-202609.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202607-202609.nc' 'SHA256' 'b60a09c06ab89b952db21078078a2124660ea84643f0da1422bc42f7ed5d9d29'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202610-202612.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202610-202612.nc' 'SHA256' '5d7314fb4898dcc0a1090e62478ce9c05d4a0eb9a8bd818d630dabf9587a81a2'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202701-202703.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202701-202703.nc' 'SHA256' '4e636ce527597a6397cc3a04a4bdc731caa251981dcf9b91f62b54383679d203'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202704-202706.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202704-202706.nc' 'SHA256' 'b9c231d3757e84d0cb1b99d4a5701df302f5e5eac6536eab20a6c484d2bf96d8'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202707-202709.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202707-202709.nc' 'SHA256' '0c4aa4c93e8c39f5447c5fe2f48dc67c888c3f68087813432fb6e7ee6c4b962c'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202710-202712.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202710-202712.nc' 'SHA256' 'ca154054e1464d156198c6b5a34e58ae606e5611b508fb9a216a988b0b38baa5'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202801-202803.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202801-202803.nc' 'SHA256' '5407b41a99e7394a69564f24efc816b549817f014bcc8569a1c7a7b9adf357eb'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202804-202806.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202804-202806.nc' 'SHA256' '1c3db9ea1913de02f956a7f9657bec75991d3e8584a971a6c680e89e71e6e023'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202807-202809.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202807-202809.nc' 'SHA256' '0456d0baaf95c5a4059c364edeb6edae62f6b0132e9c1530504b154738a0682f'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202810-202812.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202810-202812.nc' 'SHA256' '29b329762f0443960ddd39adac5def12535de0817fe1c8915eda841fdd3f2324'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202901-202903.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202901-202903.nc' 'SHA256' '81f5851e83fa0265b1b661c627f318dafdd9a8ac0befabdba8f329c140eff21d'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202904-202906.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202904-202906.nc' 'SHA256' '2c126bda9f9b95b71ce7f77764ce916036685dbbd862375eb3118a68b2e62f44'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202907-202909.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202907-202909.nc' 'SHA256' 'b5260a05a115e34592cd2c84de0383ce4438b782f3645baa362cab7b77d3d1e0'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202910-202912.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_202910-202912.nc' 'SHA256' 'a971d560113399a781f828093e2f3c57f30951b870b050dbce29b49583b6bee2'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203001-203003.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203001-203003.nc' 'SHA256' '7b823342c973b9935531030fe58898326566e2742502c3253e05fd9f13fd77fa'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203004-203006.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203004-203006.nc' 'SHA256' '36c492ffce99f662afde4d6f76ae32a161147e9579ecf04052ccacf63e9146b4'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203007-203009.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203007-203009.nc' 'SHA256' '83734cc96216fbc1ab3b852fc309363c2ab88e652475b2587afa5fa40ca683e2'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203010-203012.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203010-203012.nc' 'SHA256' '62c17b6ccbb0cdf807f755400dd2420d919d6aff7109d6a13053d7a808e8d842'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203101-203103.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203101-203103.nc' 'SHA256' 'c32301aa1f91bebe47419faac1c804d2e799aaaa90d7bea23a0788aaa12220fb'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203104-203106.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203104-203106.nc' 'SHA256' '965fa2ecb5aae1f1e41b4b60697be58ba60cd3767c15d0020da902a701e8a1c0'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203107-203109.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203107-203109.nc' 'SHA256' '385c7abf80c645b8b47c2080be67b379f4c3d3a15846fd1cf0bc4d983364a621'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203110-203112.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203110-203112.nc' 'SHA256' '464f1d483336e9f4414e688cb4a596ab0fa53ef0c7a635afcd6cc24ec7d14f73'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203201-203203.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203201-203203.nc' 'SHA256' '1ecacc048553a1809e18bae2b81d048f641bd07146ab7e9bc3fcb202c03b270c'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203204-203206.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203204-203206.nc' 'SHA256' '162c8739bcf9a447132897aff3289d9dae298a9817259fe5ee0c8696fb6b43dd'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203207-203209.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203207-203209.nc' 'SHA256' 'c0b2281c2a91d3e754e840246153e45e111e1188b530385009a81fd5980d3588'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203210-203212.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203210-203212.nc' 'SHA256' 'ba1db6b12be3e0fccc567ae2d168df4622d2c3fb1fbeeb4ddab053fd3edaea55'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203301-203303.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203301-203303.nc' 'SHA256' '00fe570349503c47e30b9aedc65734bf89c4049272dc7a10acd23b07fdb024df'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203304-203306.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203304-203306.nc' 'SHA256' 'ca10b0d4e8d545d8c7c4a64ea7448b44d09c60238ac6e3f9238ff8bd84c86952'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203307-203309.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203307-203309.nc' 'SHA256' 'cdb7d22c10493c46008b65d127647579b7fd3e3485731ff6f013fa445ebb781a'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203310-203312.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203310-203312.nc' 'SHA256' '63c965a9388427f6e4980f2012c2681853d90ecc563159bd01715478ad4f676f'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203401-203403.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203401-203403.nc' 'SHA256' 'c57d59568d8da5b54bb9561b5120878e4fe3138734c53c57cb1de4b28bb67125'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203404-203406.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203404-203406.nc' 'SHA256' '39f07dd8bd2172ebdb6c3fd7b7f61511a41f4619cd16717794eaaf6080a0d7ed'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203407-203409.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203407-203409.nc' 'SHA256' 'cf7be9526083e372d50fea88f57ead18a4995ec6ffc154a4d61123ecadfa4162'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203410-203412.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203410-203412.nc' 'SHA256' '345f52c1dd288b6284d3524823cd33c61fe479080089924b896a1a49b565871e'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203501-203503.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203501-203503.nc' 'SHA256' '919c2c128fa9edc1910b75119981ff20438e4de40036c32fb2087b8644ec9f51'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203504-203506.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203504-203506.nc' 'SHA256' '9635770f33c00e79cb9834f67eb88b19f20845d2faaf7b1ddb859aaa5e575d5a'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203507-203509.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203507-203509.nc' 'SHA256' '4e65920ae0749f32eca794aa16e166e651d5d5650f2711a485111217f45ad8c2'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203510-203512.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203510-203512.nc' 'SHA256' '67efa605c6cf1bd0fb3989008b3c2268dbbaf211e90339db831eab5b582501ab'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203601-203603.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203601-203603.nc' 'SHA256' '5e436ce6197994167d7ff146a534fff7af7ab24de0eed9c146de3f11a812e5b9'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203604-203606.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203604-203606.nc' 'SHA256' 'cadb8a839bd11fc046f39b06ec509627159acdd4e05db10365d175857c6e3f2a'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203607-203609.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203607-203609.nc' 'SHA256' '0db8bd268cfdff31241870cf1a86064a9f828cc1527f6f85d7d52fac2313ffbf'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203610-203612.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203610-203612.nc' 'SHA256' '0610b71ef7f4d47cfdfc68e41574c64ac708778272330a9750e1d70be63f8cb2'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203701-203703.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203701-203703.nc' 'SHA256' '4366263b45eb6e062c59923ada90fc687e5a134b45cc4c329de8c4ebc75af6a3'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203704-203706.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203704-203706.nc' 'SHA256' 'c65c9c3b0021e2e9cc52a95e7e081cf3c181642c6a23b38cf66d97e1cc4b04c8'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203707-203709.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203707-203709.nc' 'SHA256' 'cc7ab5e7e6c3d982de94a16b6017ce5babf9ccef6fed2239bc86b9e8cd670fcb'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203710-203712.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203710-203712.nc' 'SHA256' 'bfd5785a10c383c1cbb0dd3855912a9c86f02ba362e79646a2c854418416fe56'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203801-203803.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203801-203803.nc' 'SHA256' '9e35a5cdc02964d700b951c21b039d5fd981e018ddf25f7319a75f495d1983cb'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203804-203806.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203804-203806.nc' 'SHA256' '5663b94007905af0da9463f2deaa07554d22e907915d9930d6a6460214268f19'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203807-203809.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203807-203809.nc' 'SHA256' '0c9414d69398aefed69eb863c20179684ae7a65d9762df92ab2f153a7540ebdf'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203810-203812.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203810-203812.nc' 'SHA256' '7ecb8a893b4f891141a3f2a6bef8da38871718c6ca2a7228d57bc0e270770dca'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203901-203903.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203901-203903.nc' 'SHA256' '41fafc71c3adabcb1b9fda2de31608cc1d48638b121071bbe7e7fa1d77dd8069'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203904-203906.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203904-203906.nc' 'SHA256' '07c5cdbc792697d4d0665a947e7aaa52058cd938b0e3004ff0ead5c63447408b'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203907-203909.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203907-203909.nc' 'SHA256' 'ec4066dcacdb4762d3af0e38c1f77cf38c8990e8b09ff80c3a3610fdf0c9376a'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203910-203912.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_203910-203912.nc' 'SHA256' '72d6b177ef799c9df117fac282caaa93a22ce9b2709102b276472ed86445fda1'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204001-204003.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204001-204003.nc' 'SHA256' '823750a6e34aa5629eba589295a8d238b975911067c1431da1ebbbe7bdd68952'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204004-204006.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204004-204006.nc' 'SHA256' '1d0d1ea92c9da1f523b4b316308ef9a8b455855337da772adcd08bee2e698a68'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204007-204009.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204007-204009.nc' 'SHA256' '317baa196a9cfafd6a7731770638c489466cb118d389ec30aa6810ea6653fce0'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204010-204012.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204010-204012.nc' 'SHA256' '4694057d7592d652e40a6565f988de9494925591d26889514bfdd01c0d395f51'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204101-204103.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204101-204103.nc' 'SHA256' '6309ab7001d2aaa10505f3e8dcec781b549d6dcb23249db8d6b9c6fd7596a536'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204104-204106.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204104-204106.nc' 'SHA256' '109fe4eb8ba3e2c293f9b8d56cc4aecbd9a08d73123dcc7aefd23404f493a07a'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204107-204109.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204107-204109.nc' 'SHA256' 'bc2f70ba0d3c3d47c57e674674417f7877d16556d11b80c5a3d5fa481c4f228f'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204110-204112.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204110-204112.nc' 'SHA256' '9379efededed61761f2a013694db13fc246db83ee5ddc7007aa250d7d07ed8bc'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204201-204203.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204201-204203.nc' 'SHA256' 'aa4a2b8051acf1bd56ddc2046662ecaad69db2d2e356f076d84e99decce5c205'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204204-204206.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204204-204206.nc' 'SHA256' '6ebea3faabffe14b7a0f3273ebb7e294649c70a8956d8bbbdd8eaa1d38b0fa15'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204207-204209.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204207-204209.nc' 'SHA256' 'a6559537c4e54e3e8eddfe052eb95769531c6884516e9626a5f0e008c5f08acc'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204210-204212.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204210-204212.nc' 'SHA256' 'a7aa8151551e84cfda0dbde7709834075091876dc81791741d9d79e6956ed359'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204301-204303.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204301-204303.nc' 'SHA256' 'c180c158259be0217df1644fbb169e8f990d8dd35b0cdcf9fe10c41dccc0aff6'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204304-204306.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204304-204306.nc' 'SHA256' '3f4cad6fb3827cf0f3676db2d047ffd8216ddb839321f506bfb893c99ae73e95'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204307-204309.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204307-204309.nc' 'SHA256' '02876e3cb5b4479aa7f011c8c1d76ddbea65791bca3b88e8b1d42827aa21cb6e'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204310-204312.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204310-204312.nc' 'SHA256' 'af4965b0822dbbdeb4ad79aad3e4215b1d9ecd4e5fbf3c1115caea3571b30256'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204401-204403.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204401-204403.nc' 'SHA256' 'c86df15015f37fd1a8cbeb2075228c5cb32a6bd3beb0631a37072429ce92bc1f'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204404-204406.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204404-204406.nc' 'SHA256' '2193e73b0de3615c528d7cccddd947e3df2048a817614f7e2a2a74d16d452d15'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204407-204409.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204407-204409.nc' 'SHA256' 'f321a59640a87515550fdf3c688bf400b7f298f0427aad6a7781d6bb3d8d7620'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204410-204412.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204410-204412.nc' 'SHA256' '1afb6050a4b29c022fa745a3991de289b4eb88f7418d0f4896766c4d1f5ebd68'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204501-204503.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204501-204503.nc' 'SHA256' '3fe2f74c5fd001396e863e9bfd6ec03a9c7a14236877c4b2cd3392ec1d146335'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204504-204506.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204504-204506.nc' 'SHA256' 'c3fd884a61c13d57adf6712da3c6cc474591825df42000e71614a0613d2cb0a0'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204507-204509.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204507-204509.nc' 'SHA256' '166db4dd25a6a163a49a67a59870bc5920bf17e15bc2f7246b49cc50a7e03453'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204510-204512.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204510-204512.nc' 'SHA256' 'dfae2e064f1240c64fd23167e4b98333d3d74467d451c7843195e83a21b06930'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204601-204603.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204601-204603.nc' 'SHA256' 'a03b3bb6cd213be9e5f8f3f3c5df4f1a106f0bba2cb210f9ce741fd5d1f8b77b'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204604-204606.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204604-204606.nc' 'SHA256' '655915c958ab7473adba47cf268c8032b71eb632a75d4e10a1f3bf707c40be48'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204607-204609.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204607-204609.nc' 'SHA256' '3c1db6c4d83a98f4d34fb36e7c350e18817d19544c68694f8151814f8d046932'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204610-204612.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204610-204612.nc' 'SHA256' '2191dcfc07356060aec2a2fa99b1f26e25b9de6076749265b1a847b5a10ba439'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204701-204703.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204701-204703.nc' 'SHA256' 'cb094d552d37dd195b2c1a047c3c8fbc08fc8f92d7d00c847b7609a3db81c36d'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204704-204706.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204704-204706.nc' 'SHA256' 'adb3528a5fcb546afe2a0c3120698317c0de947c36a18c6122296dabc55243cb'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204707-204709.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204707-204709.nc' 'SHA256' 'f84ce6cfa0f9a08fd4a0cff6e4f2d84a15bc9e8ff739b006558b1d4018bb0799'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204710-204712.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204710-204712.nc' 'SHA256' '1c4822bb38798debf1da6c249e535b3bd9fc98202ebb0de9f549d9170b2df75f'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204801-204803.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204801-204803.nc' 'SHA256' '1cd937d627e3fb347e9945033f948d62dea871f85f7458acf44af7699dffebdd'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204804-204806.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204804-204806.nc' 'SHA256' '1fb02770be618a655e3ad240bdc0c21f12c779da53aa566c8aab7cacb9fd5ef7'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204807-204809.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204807-204809.nc' 'SHA256' 'a89760985a7603e4cbcae06db80c74345fa0457ed7e0db63727b57d03ab8f92c'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204810-204812.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204810-204812.nc' 'SHA256' 'f02fee649631a44fa203e5421df4d59391021ccb1874a57eea6743b8d0305bf8'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204901-204903.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204901-204903.nc' 'SHA256' '0908113dbd14eb9291697458cc8c666c9c15906d4f2fe45bfcc8f4ce110dd007'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204904-204906.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204904-204906.nc' 'SHA256' 'dd537831335460de1d16614a2b1e6a08eff06a3186dbf1196c9281d1c0a66f16'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204907-204909.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204907-204909.nc' 'SHA256' '9dd23c03cded9c0437026de8b544bc352e5d5f19bb2c73386c228e9182edf22d'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204910-204912.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_204910-204912.nc' 'SHA256' '62f4b49dc2cc762bdf4ea5a72d0cb9b016933444d6a01069f64ffb47177042c8'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_205001-205003.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_205001-205003.nc' 'SHA256' '5973d85f2e9feb85e6993470acc68cf693c5c00ad3b5fef891c8a5101c1462d1'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_205004-205006.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_205004-205006.nc' 'SHA256' '7b0dc068fafc023974d4a6f038724ec3d44df4f5e57346b614e602ac1a3ee599'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_205007-205009.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_205007-205009.nc' 'SHA256' '64e69899f4102a6b9dbe13270bcd90c73e64139065a3e0ddf5e32fea7f46be86'
'zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_205010-205012.nc' 'http://esgf-data3.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/HighResMIP/MOHC/HadGEM3-GC31-HH/highres-future/r1i1p1f1/Omon/zos/gn/v20200514/zos_Omon_HadGEM3-GC31-HH_highres-future_r1i1p1f1_gn_205010-205012.nc' 'SHA256' '7638af30482fd22169d45263168484e83898d7d37dd5c5b7ebbb36b0f446b203'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 144 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
